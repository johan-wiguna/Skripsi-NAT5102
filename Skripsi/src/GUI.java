import java.awt.Color;
import java.util.*;
import javax.swing.*;
import java.awt.FlowLayout;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.*;
import java.io.*;
import javax.imageio.*;
import org.opencv.core.*;
import org.opencv.imgcodecs.*;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author johan
 */
public class GUI extends javax.swing.JFrame {
    double wlisThreshold = 0.9;
    double hmmThreshold = 1;
    String testPath;
    String trainPath;
    ImageData testImage;
    ArrayList<ImageData> trainImages;
    boolean testIsValid = false;
    boolean trainIsValid = false;
    Color clrRed = new java.awt.Color(255, 51, 0);
    Color clrGreen = new java.awt.Color(51, 204, 51);
    
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label2 = new java.awt.Label();
        jLabel1 = new javax.swing.JLabel();
        lblChooseTest = new javax.swing.JLabel();
        btnBrowseTest = new javax.swing.JButton();
        lblPathTest = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnBrowseTrain = new javax.swing.JButton();
        lblPathTrain = new javax.swing.JLabel();
        btnVerify = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        lblTestImage = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblResultWLIS = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblResultHMM = new javax.swing.JLabel();
        lblVerifyError = new javax.swing.JLabel();

        label2.setText("label2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Skripsi - NAT5102");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Hand Signature Verification");

        lblChooseTest.setText("Choose test image path (file)");

        btnBrowseTest.setText("Browse...");
        btnBrowseTest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnBrowseTestMouseClicked(evt);
            }
        });
        btnBrowseTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseTestActionPerformed(evt);
            }
        });

        lblPathTest.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        lblPathTest.setText("(No path chosen)");
        lblPathTest.setMaximumSize(new java.awt.Dimension(240, 16));

        jLabel3.setText("Choose train images path (folder)");

        btnBrowseTrain.setText("Browse...");
        btnBrowseTrain.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnBrowseTrainMouseClicked(evt);
            }
        });

        lblPathTrain.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        lblPathTrain.setText("(No path chosen)");

        btnVerify.setText("Verify test image");
        btnVerify.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnVerifyMouseClicked(evt);
            }
        });
        btnVerify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerifyActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel2.setText("Test image preview:");

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("Weighted Longest Increasing Subsequence");

        jLabel6.setText("Result:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Hidden Markov Model");

        jLabel7.setText("Result:");

        lblVerifyError.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnVerify)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btnBrowseTrain)
                        .addComponent(btnBrowseTest)
                        .addComponent(lblChooseTest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                        .addComponent(lblPathTest, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblPathTrain, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblVerifyError, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(lblTestImage, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblResultWLIS, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblResultHMM, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblTestImage, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblResultWLIS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(58, 58, 58)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblResultHMM, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7))))
                        .addContainerGap(194, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(lblChooseTest)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnBrowseTest)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblPathTest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnBrowseTrain)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblPathTrain)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblVerifyError, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnVerify))
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(12, 12, 12))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 12, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBrowseTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseTestActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnBrowseTestActionPerformed

    private void btnVerifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerifyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnVerifyActionPerformed

    private void btnBrowseTestMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBrowseTestMouseClicked
        JFileChooser fc = new JFileChooser("C:\\_My Files\\Johan\\GitHub\\Skripsi-NAT5102\\Dataset");
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int returnVal = fc.showOpenDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File testFile = fc.getSelectedFile();
            testPath = testFile.getAbsolutePath();
            
            String fileType = getFileType(testPath);
            
            if (fileType.equalsIgnoreCase("png") || fileType.equalsIgnoreCase("jpg") || fileType.equalsIgnoreCase("jpeg")) {
                testImage = new ImageData(testPath, false, -1);
                BufferedImage bi = null;
                try {
                    bi = ImageIO.read(new File(testPath));
                } catch (IOException e) {
                    e.printStackTrace();
                }

                Image img = bi.getScaledInstance(lblTestImage.getWidth(), lblTestImage.getHeight(), Image.SCALE_SMOOTH);

                lblPathTest.setForeground(Color.BLACK);
                lblPathTest.setText(testPath);
                lblPathTest.setToolTipText(testPath);
                lblTestImage.setIcon(new ImageIcon(img));
                testIsValid = true;
            } else {
                lblPathTest.setForeground(clrRed);
                lblPathTest.setText("File type not supported!");
                lblTestImage.setIcon(null);
                testIsValid = false;
            }
        }
    }//GEN-LAST:event_btnBrowseTestMouseClicked

    private void btnBrowseTrainMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBrowseTrainMouseClicked
        JFileChooser fc = new JFileChooser("C:\\_My Files\\Johan\\GitHub\\Skripsi-NAT5102\\Dataset");
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fc.showOpenDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File trainFolder = fc.getSelectedFile();
            trainPath = trainFolder.getAbsolutePath();
            
            if (trainFolder.listFiles().length > 0) {
                File[] filePaths = trainFolder.listFiles();
                boolean imageFileExist = false;
                for (int i = 0; i < filePaths.length; i++) {
                    String fileType = getFileType(filePaths[i].toString());
                    if (fileType.equalsIgnoreCase("png") || fileType.equalsIgnoreCase("jpg") || fileType.equalsIgnoreCase("jpeg")) {
                        imageFileExist = true;
                    }
                }
                
                if (imageFileExist) {
                    lblPathTrain.setForeground(Color.BLACK);
                    lblPathTrain.setText(trainPath);
                    lblPathTrain.setToolTipText(trainPath);
                    trainIsValid = true;
                } else {
                    lblPathTrain.setForeground(clrRed);
                    lblPathTrain.setText("No image found in the directory!");
                    trainIsValid = false;
                }
            } else {
                lblPathTrain.setForeground(clrRed);
                lblPathTrain.setText("Folder can't be empty!");
                trainIsValid = false;
            }
            
        }
    }//GEN-LAST:event_btnBrowseTrainMouseClicked

    private void btnVerifyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnVerifyMouseClicked
        if (testIsValid && trainIsValid) {
            System.out.println(testPath);
            System.out.println();
            lblResultWLIS.setText(null);
            lblResultHMM.setText(null);
            lblVerifyError.setText(null);
            ImageMatcher im = new ImageMatcher();
            testImage.detectKeypoints(400);

            FolderProcessor fp = new FolderProcessor(trainPath);
            ArrayList<String> trainFilePaths = fp.getStrFilePaths();
            trainImages = convertPathsToImageData(trainFilePaths, true, 400);

            // WLIS
            long start1 = System.currentTimeMillis();
            double totalScore = 0;
            for (int i = 0; i < trainImages.size(); i++) {
                ImageData currTest = trainImages.get(i);
                ArrayList<ImageData> currTrain = new ArrayList<>();
                for (int j = 0; j < trainImages.size(); j++) {
                    if (j != i)
                        currTrain.add(trainImages.get(j));
                }

                ArrayList<ArrayList<MatOfDMatch>> currMatches = im.matchKeypoints(currTest, currTrain, 20);

                ArrayList<ImageData>[] arr = new ArrayList[1];
                arr[0] = currTrain;

                WLISValidator wlis = new WLISValidator(arr, currTest, currMatches);
                wlis.validateImage();
                totalScore += wlis.getMaxSimilarity();
            }

            double avgScore = totalScore / trainImages.size();
            
            ArrayList<ImageData>[] trainImagesArr = new ArrayList[1];
            trainImagesArr[0] = trainImages;
            ArrayList<ArrayList<MatOfDMatch>> matchesWLIS = im.matchKeypoints(testImage, trainImages, 20);
            WLISValidator wlis = new WLISValidator(trainImagesArr, testImage, matchesWLIS);
            wlis.validateImage();
            long end1 = System.currentTimeMillis();
            
            System.out.print("WLIS: ");
            if (wlis.getMaxSimilarity() >= avgScore * wlisThreshold) {
                lblResultWLIS.setForeground(clrGreen);
                lblResultWLIS.setText("Valid");
                System.out.println("Valid");
            } else {
                lblResultWLIS.setForeground(clrRed);
                lblResultWLIS.setText("Not valid");
                System.out.println("Not valid");
            }
            
            System.out.println("Test image score: " + wlis.getMaxSimilarity());
            System.out.println("Average score: " + avgScore);
            System.out.println("Time: " + (end1 - start1));
            System.out.println("");
            
            // HMM
            long start2 = System.currentTimeMillis();
            HMM[] trainHMM = new HMM[trainImages.size()];
            for (int i = 0; i < trainHMM.length; i++) {
                HMM hmm = new HMM(trainImages.get(i), 3);
                hmm.buildImageModel();
                trainHMM[i] = hmm;
            }

            ArrayList<MatOfDMatch> matchesHMM = im.matchKeypoints(testImage, trainImages);
            HMMValidator hmmValidator = new HMMValidator(trainImages, testImage, matchesHMM, trainHMM);
            hmmValidator.validateImage();
            long end2 = System.currentTimeMillis();
            
            System.out.print("HMM: ");
            if (hmmValidator.isValid) {
                lblResultHMM.setForeground(clrGreen);
                lblResultHMM.setText("Valid");
                System.out.println("Valid");
                System.out.println("Identical image found.");
            } else {
                lblResultHMM.setForeground(clrRed);
                lblResultHMM.setText("Not valid");
                System.out.println("Not valid");
                System.out.println("Identical image not found.");
            }
            
            System.out.println("Time: " + (end2 - start2));
        } else {
            lblVerifyError.setForeground(clrRed);
            lblVerifyError.setText("Can't verify while there's still an error.");
        }
        
        System.out.println("==========VERIFICATION DONE==========");
    }//GEN-LAST:event_btnVerifyMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GUI gui = new GUI();
                gui.setVisible(true);
                gui.setLocationRelativeTo(null);
            }
        });
    }
    
    public static String getFileType(String path) {
        String fileType = "";
        int dotIdx = path.lastIndexOf('.');
        if (dotIdx != -1) {
            fileType = path.substring(dotIdx + 1);
        }
        
        return fileType;
    }
    
    public static ArrayList<ImageData> convertPathsToImageData(ArrayList<String> paths, boolean imageType) {
        ArrayList<ImageData> res = new ArrayList<>();
        
        for (int i = 0; i < paths.size(); i++) {
            ImageData id = new ImageData(paths.get(i), imageType, i);
            id.detectKeypoints();
            res.add(id);
        }
        
        return res;
    }
    
    public static ArrayList<ImageData> convertPathsToImageData(ArrayList<String> paths, boolean imageType, int keypointAmount) {
        ArrayList<ImageData> res = new ArrayList<>();
        
        for (int i = 0; i < paths.size(); i++) {
            ImageData id = new ImageData(paths.get(i), imageType, i);
            id.detectKeypoints(keypointAmount);
            res.add(id);
        }
        
        return res;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowseTest;
    private javax.swing.JButton btnBrowseTrain;
    private javax.swing.JButton btnVerify;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private java.awt.Label label2;
    private javax.swing.JLabel lblChooseTest;
    private javax.swing.JLabel lblPathTest;
    private javax.swing.JLabel lblPathTrain;
    private javax.swing.JLabel lblResultHMM;
    private javax.swing.JLabel lblResultWLIS;
    private javax.swing.JLabel lblTestImage;
    private javax.swing.JLabel lblVerifyError;
    // End of variables declaration//GEN-END:variables
}